#summary GL_ARB_multisample

== Contents ==

  * [GL_ARB_multisample#Dependencies Dependencies]
  * [GL_ARB_multisample#Overview Overview]
  * [GL_ARB_multisample#New_Procedures_and_Functions New Procedures and Functions]
  * [GL_ARB_multisample#New_Tokens New Tokens]
  * [GL_ARB_multisample#Errors Errors]
  * [GL_ARB_multisample#New_State New State]
  * [GL_ARB_multisample#New_Implementation_Dependent_State New Implementation Dependent State]

== Dependencies ==

[WGL_EXT_extensions_string] is required.

[WGL_EXT_pixel_format] is required.


== Overview ==

This extension provides a mechanism to antialias all GL primitives:
points, lines, polygons, bitmaps, and images.  The technique is to
sample all primitives multiple times at each pixel.  The color
sample values are resolved to a single, displayable color each time
a pixel is updated, so the antialiasing appears to be automatic at
the application level.  Because each sample includes depth and
stencil information, the depth and stencil functions perform
equivalently to the single-sample mode.

An additional buffer, called the multisample buffer, is added to
the framebuffer.  Pixel sample values, including color, depth, and
stencil values, are stored in this buffer.  When the framebuffer
includes a multisample buffer, it does not also include separate
depth or stencil buffers, even if the multisample buffer does not
store depth or stencil values.  Color buffers (left/right, front/
back, and aux) do coexist with the multisample buffer, however.

Multisample antialiasing is most valuable for rendering polygons,
because it requires no sorting for hidden surface elimination, and
it correctly handles adjacent polygons, object silhouettes, and
even intersecting polygons.  If only points or lines are being
rendered, the "smooth" antialiasing mechanism provided by the base
GL may result in a higher quality image.  This extension is
designed to allow multisample and smooth antialiasing techniques
to be alternated during the rendering of a single scene.


== New Procedures and Functions ==
{{{
void SampleCoverageARB(clampf value,
                       boolean invert);
}}}

== New Tokens ==

Accepted by the <attribList> parameter of glXChooseVisual, and by
the <attrib> parameter of glXGetConfig:

||GLX_SAMPLE_BUFFERS_ARB      ||         100000||
||GLX_SAMPLES_ARB             ||         100001||

Accepted by the <piAttributes> parameter of
wglGetPixelFormatAttribivEXT, wglGetPixelFormatAttribfvEXT, and
the <piAttribIList> and <pfAttribIList> of wglChoosePixelFormatEXT:

||WGL_SAMPLE_BUFFERS_ARB      ||         0x2041||
||WGL_SAMPLES_ARB             ||         0x2042||

Accepted by the <cap> parameter of Enable, Disable, and !IsEnabled,
and by the <pname> parameter of !GetBooleanv, !GetIntegerv,
!GetFloatv, and !GetDoublev:

||MULTISAMPLE_ARB                  ||    0x809D||
||SAMPLE_ALPHA_TO_COVERAGE_ARB     ||    0x809E||
||SAMPLE_ALPHA_TO_ONE_ARB           ||   0x809F||
||SAMPLE_COVERAGE_ARB              ||    0x80A0||

Accepted by the <mask> parameter of !PushAttrib:

||MULTISAMPLE_BIT_ARB       ||           0x20000000||

Accepted by the <pname> parameter of !GetBooleanv, !GetDoublev,
!GetIntegerv, and !GetFloatv:

||SAMPLE_BUFFERS_ARB           ||        0x80A8||
||SAMPLES_ARB                  ||        0x80A9||
||SAMPLE_COVERAGE_VALUE_ARB    ||        0x80AA||
||SAMPLE_COVERAGE_INVERT_ARB    ||       0x80AB||


== Errors ==

INVALID_OPERATION is generated if SampleCoverageARB is called
between the execution of Begin and the execution of the
corresponding End.

== New State ==

|| *Get Value* || *Get Command* || *Type* || *Initial Value* ||
||MULTISAMPLE_ARB||!IsEnabled || B || TRUE ||
||SAMPLE_ALPHA_TO_COVERAGE_ARB ||!IsEnabled ||B || FALSE ||
||SAMPLE_ALPHA_TO_ONE_ARB || !IsEnabled||  B||FALSE  ||
||SAMPLE_COVERAGE_ARB||!IsEnabled ||B ||FALSE ||
||SAMPLE_COVERAGE_VALUE_ARB||!GetFloatv||R+ || 1||
||SAMPLE_COVERAGE_INVERT_ARB||!GetBooleanv||B ||FALSE  ||


== New Implementation Dependent State ==

|| *Get Value* || *Get Command* || *Type* || *Minimum Value* ||
||SAMPLE_BUFFERS_ARB   ||    !GetIntegerv  ||  Z+   ||   0||
||SAMPLES_ARB           ||   !GetIntegerv  ||  Z+    ||  0||