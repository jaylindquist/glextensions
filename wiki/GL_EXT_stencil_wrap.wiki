#summary GL_EXT_stencil_wrap

== Contents ==

  * [GL_EXT_stencil_wrap#Dependencies Dependencies]
  * [GL_EXT_stencil_wrap#Overview Overview]
  * [GL_EXT_stencil_wrap#New_Procedures_and_Functions New Procedures and Functions]
  * [GL_EXT_stencil_wrap#New_Tokens New Tokens]
  * [GL_EXT_stencil_wrap#Errors Errors]
  * [GL_EXT_stencil_wrap#New_State New State]
  * [GL_EXT_stencil_wrap#New_Implementation_Dependent_State New Implementation Dependent State]

== Dependencies ==

None


== Overview ==

Various algorithms use the stencil buffer to "count" the number of
surfaces that a ray passes through.  As the ray passes into an object,
the stencil buffer is incremented.  As the ray passes out of an object,
the stencil buffer is decremented.

GL requires that the stencil increment operation clamps to its maximum
value.  For algorithms that depend on the difference between the sum
of the increments and the sum of the decrements, clamping causes an
erroneous result.

This extension provides an enable for both maximum and minimum wrapping
of stencil values.  Instead, the stencil value wraps in both directions.

Two additional stencil operations are specified.  These new operations
are similiar to the existing INCR and DECR operations, but they wrap
their result instead of saturating it.  This functionality matches
the new stencil operations introduced by DirectX 6.


== New Procedures and Functions ==

None


== New Tokens ==

Accepted by the <sfail>, <dpfail>, and <dppass> parameter of
StencilOp:

||INCR_WRAP_EXT  ||0x8507||
||DECR_WRAP_EXT  ||0x8508||


== Errors ==

INVALID_ENUM is generated by StencilOp if any of its parameters
are not KEEP, ZERO, REPLACE, INCR, DECR, INVERT, INCR_WRAP_EXT,
or DECR_WRAP_EXT.


== New State ==


== New Implementation Dependent State ==

None

