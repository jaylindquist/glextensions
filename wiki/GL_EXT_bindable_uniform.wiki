#summary GL_EXT_bindable_uniform

== Contents ==

  * [GL_EXT_bindable_uniform#Dependencies Dependencies]
  * [GL_EXT_bindable_uniform#Overview Overview]
  * [GL_EXT_bindable_uniform#New_Procedures_and_Functions New Procedures and Functions]
  * [GL_EXT_bindable_uniform#New_Tokens New Tokens]
  * [GL_EXT_bindable_uniform#Errors Errors]
  * [GL_EXT_bindable_uniform#New_State New State]
  * [GL_EXT_bindable_uniform#New_Implementation_Dependent_State New Implementation Dependent State]

== Dependencies ==

OpenGL 1.1 is required.

This extension is written against the OpenGL 2.0 specification and version
1.10.59 of the OpenGL Shading Language specification.

This extension interacts with [GL_EXT_geometry_shader4].


== Overview ==

This extension introduces the concept of bindable uniforms to the OpenGL
Shading Language.  A uniform variable can be declared bindable, which
means that the storage for the uniform is not allocated by the
compiler/linker anymore, but is backed by a buffer object.  This buffer
object is bound to the bindable uniform through the new command
UniformBufferEXT().  Binding needs to happen after linking a program
object.

Binding different buffer objects to a bindable uniform allows an
application to easily use different "uniform data sets", without having to
re-specify the data every time.

A buffer object can be bound to bindable uniforms in different program
objects. If those bindable uniforms are all of the same type, accessing a
bindable uniform in program object A will result in the same data if the
same access is made in program object B.  This provides a mechanism for
'environment uniforms', uniform values that can be shared among multiple
program objects.


== New Procedures and Functions ==
{{{
void UniformBufferEXT(uint program, int location, uint buffer);
int GetUniformBufferSizeEXT(uint program, int location);
intptr GetUniformOffsetEXT(uint program, int location);
}}}

== New Tokens ==

Accepted by the <pname> parameter of !GetBooleanv, !GetIntegerv, !GetFloatv,
and !GetDoublev:

||MAX_VERTEX_BINDABLE_UNIFORMS_EXT         ||       0x8DE2||
||MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT       ||       0x8DE3||
||MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT       ||       0x8DE4||
||MAX_BINDABLE_UNIFORM_SIZE_EXT            ||       0x8DED||
||UNIFORM_BUFFER_BINDING_EXT               ||       0x8DEF||

Accepted by the <target> parameters of !BindBuffer, !BufferData,
!BufferSubData, !MapBuffer, !UnmapBuffer, !GetBufferSubData, and
!GetBufferPointerv:

||UNIFORM_BUFFER_EXT                   ||         0x8DEE||


== Errors ==

The error INVALID_VALUE is generated by UniformBufferEXT,
GetUniformBufferSize, or GetUniformOffsetEXT if <program> is not the name
of a program or shader object.

The error INVALID_OPERATION is generated by UniformBufferEXT,
GetUniformBufferSize, or GetUniformOffsetEXT if <program> is the name of a
shader object.

The error INVALID_OPERATION is generated by the Uniform`*` commands if
<location> refers to a bindable uniform structure or an array of such
structures.

The error INVALID_OPERATION is generated by the Uniform`*` commands if
<location> refers to a bindable uniform that has no buffer object bound.

The error INVALID_OPERATION is generated by the Uniform`*` commands if
<location> refers to a bindable uniform and the bound buffer object is not
of sufficient size to store data into <location>.

The error INVALID_OPERATION is generated by the GetUniformBufferSizeEXT
and UniformBufferEXT commands if <program> has not been successfully
linked.

The error INVALID_OPERATION is generated by the GetUniformBufferSizeEXT
and UniformBufferEXT commands if <location> is not the location
corresponding to the name of the bindable uniform itself or if <location>
does not correspond to an active bindable uniform in <program>.

The error INVALID_OPERATION is generated by GetUniformOffsetEXT if
<program> was not linked successfully, if <location> refers to a uniform
that was not declared as bindable, or if <location> refers to a boolean,
boolean vector, or matrix uniform.

The error INVALID_OPERATION is generated by the UniformBufferEXT command if
<buffer> is not the name of a buffer object.

The error INVALID_OPERATION is generated by Begin, Rasterpos or any
command that performs an implicit Begin if:

- A buffer object is bound to multiple bindable uniforms in the currently
active program object.

- There is one, or more, bindable uniform(s) in the currently active
program object that does not have a buffer object bound to it.

- There is one, or more, bindable uniform(s) in the currently active
program object that have a buffer object bound to it of insufficient
size. This means that the buffer object is smaller than the size that
would be returned by GetUniformBufferSizeEXT for the bindable uniform.


== New State ==

|| *Get Value* ||  *Type* || *Get Command* || *Initial Value* || *Description* ||
||UNIFORM_BUFFER_BINDING_EXT ||Z+||!GetIntegerv||0 ||Uniform buffer bound to the context for buffer object manipulation.||


== New Implementation Dependent State ==

|| *Get Value* || *Type* || *Get Command* || *Minimum Value* || *Description* ||
||MAX_BINDABLE_VERTEX_UNIFORMS_EXT||Z+||!GetIntegerv|| 8 ||Number of bindable uniforms per vertex shader||
||MAX_BINDABLE_FRAGMENT_UNIFORMS_EXT|| Z+||!GetIntegerv ||8||Number of bindable uniforms per fragment shader||
||MAX_BINDABLE_GEOMETRY_UNIFORMS_EXT||Z+||!GetIntegerv||8||Number of bindable uniforms per geometry shader||
||MAX_BINDABLE_UNIFORM_SIZE_EXT||Z+||!GetIntegerv||16384|| Maximum size (in bytes) for bindable uniform storage.||

