#summary GL_EXT_copy_texture

== Contents ==

  * [GL_EXT_copy_texture#Dependencies Dependencies]
  * [GL_EXT_copy_texture#Overview Overview]
  * [GL_EXT_copy_texture#New_Procedures_and_Functions New Procedures and Functions]
  * [GL_EXT_copy_texture#New_Tokens New Tokens]
  * [GL_EXT_copy_texture#Errors Errors]
  * [GL_EXT_copy_texture#New_Implementation_Dependent_State New Implementation Dependent State]

== Dependencies ==

[GL_EXT_texture] is required.

[GL_EXT_texture3D] affects the definition of this extension.

[GL_SGIS_texture_filter4] affects the definition of this extension.

[GL_EXT_subtexture] affects the definition of this extension.


== Overview ==

This extension defines methods to load texture images directly from the
framebuffer.  Methods are defined for both complete and partial
replacement of a texture image.  Because it is not possible to define
an entire 3D texture using a 2D framebuffer image, 3D textures are
supported only for partial replacement.


== New Procedures and Functions ==

void CopyTexImage1DEXT(enum target,
int level,
enum internalformat,
int x,
int y,
sizei width,
int border);

void CopyTexImage2DEXT(enum target,
int level,
enum internalformat,
int x,
int y,
sizei width,
sizei height,
int border);

void CopyTexSubImage1DEXT(enum target,
int level,
int xoffset,
int x,
int y,
sizei width);

void CopyTexSubImage2DEXT(enum target,
int level,
int xoffset,
int yoffset,
int x,
int y,
sizei width,
sizei height);

void CopyTexSubImage3DEXT(enum target,
int level,
int xoffset,
int yoffset,
int zoffset,
int x,
int y,
sizei width,
sizei height);


== New Tokens ==

None


== Errors ==

INVALID_ENUM is generated if CopyTexImage1DEXT or CopyTexSubImage1DEXT
parameter <target> is not TEXTURE_1D.  (The commands defined by this
extension do not accept PROXY targets.)

INVALID_ENUM is generated if CopyTexImage2DEXT or CopyTexSubImage2DEXT
parameter <target> is not TEXTURE_2D.

INVALID_ENUM is generated if CopyTexSubImage3DEXT parameter <target>
is not TEXTURE_3D_EXT.

INVALID_VALUE is generated if CopyTexImage1DEXT or CopyTexImage2DEXT
parameter <level> is less than zero, or greater than the maximum value
supported by the implementation.

INVALID_ENUM is generated if CopyTexImage1DEXT or CopyTexImage2DEXT
parameter <internalformat> is not ALPHA, RGB, RGBA, LUMINANCE,
LUMINANCE_ALPHA, or one of the token values defined by EXT_texture.

INVALID_VALUE is generated when any of the <width> or <height>
parameters of CopyTexImage1DEXT or CopyTexImage2DEXT is less than zero,
or if it cannot be represented as 2**k + 2*border for some integer k.

INVALID_VALUE is generated if CopyTexSubImage1DEXT, CopyTexSubImage2DEXT,
or CopyTexSubImage3DEXT parameter <xoffset>, CopyTexSubImage2DEXT or
CopyTexSubImage3DEXT parameter <yoffset>, or CopyTexSubImage3DEXT
parameter <zoffset> is less than -TEXTURE_BORDER, where TEXTURE_BORDER
is the border width of the texture array to be modified.

INVALID_VALUE is generated if CopyTexSubImage1DEXT, CopyTexSubImage2DEXT,
or CopyTexSubImage3DEXT (xoffset + width) > (TEXTURE_WIDTH -
TEXTURE_BORDER), or if CopyTexSubImage2DEXT or CopyTexSubImage3DEXT
(yoffset + height) > (TEXTURE_HEIGHT - TEXTURE_BORDER), or if
CopyTexSubImage3DEXT zoffset >= (TEXTURE_DEPTH_EXT - TEXTURE_BORDER).
Note that TEXTURE_WIDTH, TEXTURE_HEIGHT, and TEXTURE_DEPTH_EXT include
twice the border width.

TEXTURE_TOO_LARGE_EXT is generated by CopyTexImage1DEXT or
CopyTexImage2DEXT if the specified image is too large, for any reason.
(See EXT_texture for a discussion of how applications can query the
maximum texture size.)

INVALID_VALUE is generated if CopyTexImage1DEXT or CopyTexImage2DEXT
parameter <border> is not 0, 1, or 2.

INVALID_OPERATION is generated if CopyTexImage1DEXT, CopyTexImage2DEXT,
CopyTexSubImage1DEXT, CopyTexSubImage2DEXT, or CopyTexSubImage3DEXT is
called between execution of Begin and the corresponding execution of
End.


== New Implementation Dependent State ==

None